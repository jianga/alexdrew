<?xml version="1.0" encoding="utf-8"?>

<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:comp = "ui.*" resizeEffect="resize" creationComplete="init()" layout="absolute" width="948.6" height="656" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<mx:Style>
       	.myFontStyle { 
           	fontSize: 18;
      	}
    </mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.List;
			import mx.controls.Image;
			import mx.containers.Panel;
			import mx.managers.PopUpManager
			import mx.containers.ControlBar;
            import mx.containers.VBox;
            import mx.controls.Button;
            import mx.controls.Label;
            import mx.controls.Spacer;
            import mx.controls.TextInput;
            import mx.collections.ArrayCollection;
            import mx.collections.XMLListCollection;
            
            private var OKButton:Button = new Button();
			private var dropdown:ComboBox = new ComboBox();
			private var browserPanel:Panel = new Panel();
			private var newFolderPanel:Panel;
			
			private var docMenu:ContextMenu = new ContextMenu();
            private var jobMenu:ContextMenu = new ContextMenu(); 
			
			[Bindable] private var nameInput:TextInput = new TextInput();
			private var openSequence:Array = [];
			[Bindable] public var myJobs:XML =
            <root label = "My Jobs" isBranch ="true">
            </root>;
            
            [Bindable] public var myDocs:XML =
            <root label = "My Documents" isBranch = "true">
            </root>;

			[Bindable] public var selectedFolder:XML;

			[Embed(source="Pictures/calendar.jpg")]
			public var calendarpicture:Class;
			[Embed(source="Pictures/calendar.jpg")]
			public var docpicture:Class;
			[Embed(source="Pictures/calendar.jpg")]
			public var briefcasepicture:Class;
			[Embed(source="Pictures/calendar.jpg")]
			public var folderpicture:Class;
			
			private var areYouSureWindowDoc:Panel;
			private var areYouSureWindowJob:Panel;
			
			private function resize():void{
				
			}

			
			private function init():void{
				var docmenuView:ContextMenuItem = new ContextMenuItem("View");
				docmenuView.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,viewDoc); 
				docMenu.addItem(docmenuView);
				var docmenuEdit:ContextMenuItem = new ContextMenuItem("Edit");
				docmenuEdit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,editDoc); 
            	docMenu.addItem(docmenuEdit);
            	var docmenuDelete:ContextMenuItem = new ContextMenuItem("Delete");
				docmenuDelete.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,deleteDoc); 
            	docMenu.addItem(docmenuDelete);
				
				var jobmenuView:ContextMenuItem = new ContextMenuItem("View");
				jobmenuView.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,viewJob); 
				jobMenu.addItem(jobmenuView);
				var jobmenuEdit:ContextMenuItem = new ContextMenuItem("Edit");
				jobmenuEdit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,editThisJob); 
            	jobMenu.addItem(jobmenuEdit);
            	var jobmenuDelete:ContextMenuItem = new ContextMenuItem("Delete");
				jobmenuDelete.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,deleteJob); 
            	jobMenu.addItem(jobmenuDelete);
			
				var s:Spacer = new Spacer();
				newFolderPanel=new Panel();
				newFolderPanel.title="New Folder";
				newFolderPanel.visible=true;
				var vb:VBox = new VBox();
                var nameLabel:Label = new Label();;
                var cb:ControlBar = new ControlBar();
                var saveButton:Button = new Button();
                var cancelButton:Button = new Button();
                s.percentWidth = 100;
                saveButton.label = "Save";
                saveButton.addEventListener(MouseEvent.CLICK, saveFolder);
                cancelButton.label = "Cancel";
                cancelButton.addEventListener(MouseEvent.CLICK, closePopUpNF);
                cb.addChild(s);
                cb.addChild(saveButton);
                cb.addChild(cancelButton);
                nameLabel.text = "New Folder Name:";
                vb.setStyle("paddingBottom", 5);
                vb.setStyle("paddingLeft", 5);
                vb.setStyle("paddingRight", 5);
                vb.setStyle("paddingTop", 5);
                vb.addChild(nameLabel);
                vb.addChild(nameInput);
                nameInput.width=200;
                newFolderPanel.width = 240;
                newFolderPanel.height = 140;
                newFolderPanel.addChild(vb);
                newFolderPanel.addChild(cb);
				
				
				
                                        
			}
			
			private function viewDoc(evt:Event):void{
				doubleClickDoc(evt);
			}
			
			private function editDoc(evt:Event):void{
				doubleClickDoc(evt);
			}
			
			
			private function viewJob(evt:Event):void{
				singleClickJob();
			}
			
			private function editThisJob(evt:Event):void{
				doubleClickJob(evt);
			}

			private function saveFolder(evt:MouseEvent):void {
				
				
							
				if(viewstack1.selectedChild.label == "Positions"){
					selectedNode = jobTree.selectedItem as XML;
					if(selectedNode != null){
    					if (selectedNode.localName()=="job"){
    						selectedNode=jobTree.getParentItem(jobTree.selectedItem);				
    					}			
    				}
    				else{
                		selectedNode=myJobs;
                		}
                	selectedNode.appendChild(<folder id = {nameInput.text} label = {nameInput.text} isBranch = "true"/>);
                	jobTree.expandItem(selectedNode, true);
    			}
    			
    			if(viewstack1.selectedChild.label == "Documents"){
    				selectedNode = docTree.selectedItem as XML;
					if(selectedNode != null){
    					if (selectedNode.localName()=="doc"){
    						selectedNode=docTree.getParentItem(docTree.selectedItem);				
    					}			
    				}
    				else{
                		selectedNode=myDocs;
                		}
                	selectedNode.appendChild(<folder id = {nameInput.text} label = {nameInput.text} isBranch = "true"/>);
                	docTree.expandItem(selectedNode, true);
    			}
    			
    			nameInput.text = "";
                PopUpManager.removePopUp(newFolderPanel);
            }
			
			private function closePopUpNF(evt:MouseEvent):void {
                PopUpManager.removePopUp(newFolderPanel);
                nameInput.text = "";
            }
            
			
			private function getFolderPopUp(event:MouseEvent):void{
				PopUpManager.addPopUp(newFolderPanel, this, true);
                PopUpManager.centerPopUp(newFolderPanel);
			}
		]]>
	</mx:Script>
	
	<mx:ViewStack x="10" y="10" id="viewstack1" width="100%" height="100%">
		<mx:Canvas label="Calendar" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" icon="@Embed(source='Pictures/calpic-sm.jpg')">
			<mx:Image x="0" y="92" width="557" height="534">
				<mx:source>Pictures/calendar.png</mx:source>
			</mx:Image>
			<mx:ViewStack x="565" y="92" id="viewstack3" width="351" height="524">
				<mx:Canvas label="View 1" width="100%" height="100%">
				</mx:Canvas>
			</mx:ViewStack>

			<mx:TitleWindow id = "todo" x="565" y="92" width="351" height="524" layout="absolute" title="To Do:" fontSize="20">
				<!--><mx:CheckBox x="10" y="20" label="Add a Job" width="311"/><-->

			</mx:TitleWindow>
			<mx:Text x="296" y="10" text="Welcome to PathFinder!" fontSize="50" color="#497AD2" width="556" fontFamily="Georgia"/>
		</mx:Canvas>
		<mx:Canvas label="Documents" width="100%" height="100%" horizontalScrollPolicy="off" visible="true" verticalScrollPolicy="off" icon="@Embed(source='Pictures/docpicturesm.jpg')">
			<mx:Button x="0" y="589" label="Add Folder" width="124" click="getFolderPopUp(event)" fontSize="14"/>
			<mx:Button x="141" y="589" label="Add Doc" width="124" click="addDocagain()" fontSize="14"/>
			<mx:ViewStack x="273" y="10" id="documentpane" width="100%" height="100%">
			<mx:Canvas id = "initialdoc" label="Initial" width="100%" height="100%">
			</mx:Canvas>
			<mx:Canvas id = "addDoc" label="AddDoc" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<!--<comp:DocWindow id = "docw" x = "0" y = "0">
						
					</comp:DocWindow>-->
					<mx:Button x="10" y="562" label="Save" fontSize="20" width="97" click = "saveDoc()"/>
					<mx:Button x="115" y="562" label="Cancel" fontSize="20" click="cancelDoc()"/>
					<mx:Button x="222" y="562" label="Clear All" fontSize="20" click = "clearDocFields()"/>
				</mx:Canvas>
				<mx:Canvas id = "docview" label="viewDoc" width="100%" height="100%" >
					<mx:TitleWindow id = "docviewWind" x="0" y="0" width="633" height="554" layout="absolute" title="View Doc" fontSize="34" fontFamily="Times New Roman">
						<mx:Text id = "docviewText" x="10" y="10" width="583" height="501" text = "dootdoc" styleName = "myFontStyle"/>
					</mx:TitleWindow>
					<mx:Button x="10" y="562" label="Edit" fontSize="20" click = "editDoc2()"/>
				</mx:Canvas>
			</mx:ViewStack>
			<mx:Tree id = "docTree" x="0" y="88" width="265" height="498" doubleClickEnabled = "true" showRoot="true" labelField="@label" dragEnabled="true" contextMenu="docMenu" rightClick = "docMenu.display(this.stage, this.mouseX, this.mouseY)" dropEnabled="true" dataProvider="{myDocs}">	

			</mx:Tree>
			
		</mx:Canvas>
		<mx:Canvas label="Positions" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" icon="@Embed(source='Pictures/briefcasepic-jobs.jpg')">
			<mx:Button x="0" y="589" label="Add Folder" width="124" click="getFolderPopUp(event)" fontSize="14"/>
			<mx:Button x="141" y="589" label="Add Job" width="124" click="addJobagain()" fontSize="14"/>
			<mx:ViewStack x="273" y="10" id="jobpane" width="643" height="606">
				<mx:Canvas id = "initialjob" label="Initial" width="100%" height="100%">
				</mx:Canvas>
				<mx:Canvas id = "addJob" label="addJob" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
					<!--<comp:JobWindow id = "jobw" x = "0" y = "0"/>-->
						
					
					<mx:Button x="10" y="562" label="Save" fontSize="20" width="97" click="saveJob()"  styleName="myFontStyle"/>
					<mx:Button x="115" y="562" label="Cancel" fontSize="20" click="cancelJob()" styleName="myFontStyle"/>
					<mx:Button x="222" y="562" label="Clear All" fontSize="20" click = "clearJobFields()" styleName="myFontStyle"/>
				</mx:Canvas>
				<mx:Canvas id = "view" label="viewJob" width="100%" height="100%" >
					<mx:TitleWindow id = "viewWind" x="0" y="0" width="633" height="554" layout="absolute" title="View Job" fontSize="34" fontFamily="Times New Roman">
						<mx:Text id = "viewText" x="10" y="10" width="583" height="501" text = "doot" styleName = "myFontStyle"/>
					</mx:TitleWindow>
					<mx:Button x="10" y="562" label="Edit" fontSize="20" click = "editJob()"/>
				</mx:Canvas>
			</mx:ViewStack>
			<mx:Tree id = "jobTree" x="0" y="88" width="265" height="498" doubleClickEnabled = "true" showRoot="true" labelField="@label" dragEnabled="true" dropEnabled="true" defaultLeafIcon="@Embed(source='Pictures/briefcase-leaf.jpg')" contextMenu="jobMenu" rightClick = "jobMenu.display(this.stage, this.mouseX, this.mouseY)" dataProvider="{myJobs}">	

			</mx:Tree>
		</mx:Canvas>
	</mx:ViewStack>
	<mx:ToggleButtonBar x="10" y="10">
	</mx:ToggleButtonBar>
	<mx:ToggleButtonBar dataProvider="viewstack1" labelField="icon" height="85" width="264" horizontalCenter="-331" verticalCenter="-271">
	</mx:ToggleButtonBar>
	
	
	<mx:Script>
		<![CDATA[
			import mx.containers.HBox;

			import mx.core.Window;
			import ui.DocWindow;
			import mx.controls.DateChooser;
			import mx.controls.Text;
			import mx.controls.List;
			import mx.controls.ComboBox;
			import model.Doc;
			import model.Job;
			import ui.JobWindow;
			import mx.binding.utils.BindingUtils;
			import mx.controls.CheckBox;
			

			[Bindable] private var selectedNode:XML;
			[Bindable] private var jobList:Array = new Array();
			[Bindable] private var editing:Boolean = false;
			private var current:XML;
			[Bindable] private var index:int;
			[Bindable] private var jobText:String;
			[Bindable] private var docText:String;
			[Bindable] private var currentJobWindow:JobWindow;
			[Bindable] private var currentDocWindow:DocWindow;
			
			
			private var interval1:Number=0;
			private var interval2:Number=0;
			
			private var checkInd = 5;

			
			private function clearDocFields():void {
//				docw.doctitle.text = "";
//				docw.docdescription.text = "";
//				docw.docfile.text = "";
			}
			

			
			private function cancelDoc():void {
				documentpane.selectedChild=initialdoc;
				addDoc.removeChild(currentDocWindow);
				currentDocWindow = null;
			}
			
			
			private function saveJob():void {
				trace(editing && current==null);
				if (editing==true && current!=null){
					//if this is an old job being edited
					for (var i:int = 0; i < jobList.length; ++i){
		                               var jobCheck:Job = jobList[i];
		                               var jobLabel:String = (jobCheck.company+" - "+jobCheck.title);

		                               if(jobLabel == current.attribute("label")){
		                                       var job:Job = new Job(currentJobWindow);
		                              		   current.@label=(job.company+" - "+job.title);
		                                       jobList[i]=job;
		                                       editing=false;
		                                       current=null;
		                                       jobTree.selectedItem=selectedNode;
		                                       singleClickJob();       
		                               }
		                               break;
		                       }
		        editing=false;
				}else{
					
				jobpane.selectedChild=initialjob;
				var job:Job = new Job(JobWindow(currentJobWindow));
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName().toString()=="job"){
					trace("not a branch!");
					selectedNode = jobTree.getParentItem(jobTree.selectedItem);
				}
				if(selectedNode == null){
					trace("selectedNode null");
					selectedNode = myJobs;			
				}
				
				

				var jobLabel:String = job.company + " - " + job.title;
				trace(jobLabel);
				selectedNode.appendChild(<job id = {jobLabel} label = {jobLabel} isBranch = "false"/>);
				jobList.push(job);
				
            	jobTree.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickJob);
            	jobTree.addEventListener(MouseEvent.CLICK, clickHandler);
            	jobTree.expandItem(selectedNode, true);
            	addJob.removeChild(currentJobWindow);
            	currentJobWindow = null;


            	jobText = job.viewText();

				jobpane.selectedChild = view;
				trace("viewText:");
            	trace(viewText);
					if(viewText == null){
				}				
				else{				
					viewText.text = jobText;
				}
           	//jobTree.selectedItem = selectedNode.job.(@label = jobLabel);
           	
           	singleClickJob();


            	trace(job.requirementsArray);
            	var jobTitle:Label = new Label();
            	jobTitle.text = jobLabel;
            	jobTitle.x = 10;
            	jobTitle.y = checkInd + 10;
            	todo.addChild(jobTitle);
            	checkInd += 40;
            	
            	
				for(var requirement:String in job.requirementsArray){
					
					
					var check:CheckBox = new CheckBox();
					check.label = job.requirementsArray[requirement];
					check.x = 30;
					check.y = checkInd;
				    todo.addChild(check);
				    checkInd += 30;
				}

			}}
			
			private function addJobagain():void{
				current=null;
				editing=false;
				if(currentJobWindow != null){
					addJob.removeChild(currentJobWindow);
				}
				jobpane.selectedChild=addJob; 
				var jobWindow:JobWindow = new JobWindow();
				trace("New Job Window created");
				addJob.addChild(jobWindow);
				currentJobWindow = jobWindow;

			}
			
			private function addDocagain():void{
				current=null;
				editing=false;
				if(currentDocWindow != null){
					addDoc.removeChild(currentDocWindow);
				}
				documentpane.selectedChild=addDoc; 
				var docWindow:DocWindow = new DocWindow();
				trace("New Doc Window created");
				addDoc.addChild(docWindow);
				currentDocWindow = docWindow;
			}

			
			private function doubleClickJob(evt:Event):void{	
				current=jobTree.selectedItem as XML;
				editing=true;
				clearInterval(interval1);
				if(currentJobWindow != null){
					addJob.removeChild(currentJobWindow);
				}
				editing = true;
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode!=null){
				if (selectedNode.localName()=="job"){
					var parent:XML = selectedNode.parent();
					jobpane.selectedChild=addJob;
					var selectedJob:Job;
					for (var i:int = 0; i < jobList.length; ++i){
						var job:Job = jobList[i];
						
						if(job.company + " - " + job.title == selectedNode.attribute("label")){
							selectedJob = job;
							index = jobList.indexOf(job);
						}
					}
					addJob.addChild(selectedJob.jobWindow);
					currentJobWindow = selectedJob.jobWindow;

					
				}
				else if(selectedNode.localName()=="folder" || selectedNode.localName()=="root"){
					
				}
			}
					
			}
			
			private function singleClickJob():void{
				if (!editing){
				clearInterval(interval1);
				editing = false;
				current=null;
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName()=="job"){
				
					var parent:XML = selectedNode.parent();
					var selectedJob:Job;
					for (var i:int = 0; i < jobList.length; ++i){
						var job:Job = jobList[i];
							if((job.company + " - " + job.title) == selectedNode.attribute("label")){
							selectedJob = job;

						}
					}
					
					jobText = selectedJob.viewText();
					jobpane.selectedChild = view;
	
					 //trace("viewText:");
            		 //trace(viewText);
					if(viewText == null){
					}				
					else{				
						viewText.text = jobText;
					}
				}
				else if(selectedNode!=null && (selectedNode.localName()=="folder" || selectedNode.localName()=="root")){
					jobTree.expandItem(selectedNode, true);
				}
				
				

				clearInterval(interval1);


			}}


			
			private function clickHandler(event:MouseEvent):void{			
				clearInterval(interval1);
				interval1 = setInterval(singleClickJob, 300);

			}

			private function deleteJob(evt:Event):void{
				//trace('deleting...');
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName()!="root"){
					areYouSureJob();
					//delete jobTree.job.(@label==selectedNode.label)[0];
//					var deleteNode:XML = jobTree.selectedItem as XML;
//					jobTree.selectedItem = deleteNode.parent();
//					delete jobTree.selectedItem.node[deleteNode.childIndex()];	
//					trace("deleted?")	
					//removeNode(jobTree, selectedNode);	
					//jobpane.selectedChild = initialjob;						
				}
			}
			
			private function removeNode(tree:Tree, node:XML):void
            {
                //var node:XML = XML(tree.selectedItem);
                if(node == null) return;
				tree.selectedItem = node.parent();
                var children:XMLList = XMLList(node.parent().children());
                for(var i:int=0; i<children.length(); i++)
                {
                    if(children[i].@label == node.@label)
                    {
                        delete children[i];
                    }
                }
            } 

			
			private function cancelJob():void {
				editing=false;
				jobpane.selectedChild=initialjob;
				addJob.removeChild(currentJobWindow);
				currentJobWindow = null;
			}
		
			private function clearJobFields():void {
				addJobagain();
			}
			
			[Bindable] private var docList:Array = new Array();
		
		
		
		
		
			private function saveDoc():void {
				if (current != null){
					for (var i:int = 0; i < docList.length; ++i){
		                               var docCheck:Doc = docList[i];
		                               if(docCheck.title == current.attribute("label")){
		                               		   var doc:Doc = new Doc(currentDocWindow);
		                              		   current.@label=doc.title;
		                                       docList[i]=doc;
		                                       editing=false;
		                                       current=null;
		                                       docTree.selectedItem=selectedNode;
		                                       singleClickDoc();       
		                               }
		                               break;
		                       }
		        editing=false;
				}
				else{
                   documentpane.selectedChild=initialdoc;
                   var doc:Doc = new Doc(currentDocWindow);
                   
                   selectedNode = docTree.selectedItem as XML;
                   if (selectedNode != null && selectedNode.localName().toString()=="doc"){
						selectedNode = docTree.getParentItem(docTree.selectedItem);
					}
				   if(selectedNode == null){
						//trace("selectedNode null");
						selectedNode = myDocs;				
				   }
				   
                   selectedNode.appendChild(<doc id = {doc.title} label = {doc.title} isBranch = "false"/>);
                   docList.push(doc);
                  
                   
                   docTree.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickDoc);
                   docTree.addEventListener(MouseEvent.CLICK, clickHandlerDoc);
                   docTree.expandItem(selectedNode, true);
                   
                   addDoc.removeChild(currentDocWindow);
            	   currentDocWindow = null;
            	   
            	   docText = doc.viewText();
				   documentpane.selectedChild = docview;
				   if(docviewText == null){
				   }				
				   else{							   
					docviewText.text = docText;
			     	}
			       
			     	}
			     	docTree.selectedItem = selectedNode;
			     	//docTree.selectedItem = selectedNode.children()[selectedNode.children().length()];
			     	trace(docTree.selectedItem==null);
			      	singleClickDoc();
            }
            
            private function clickHandlerDoc(event:MouseEvent):void{			
				clearInterval(interval2);
				interval2 = setInterval(singleClickDoc, 300);

			}
            
            private function doubleClickDoc(evt:Event):void{  
            	selectedNode = docTree.selectedItem as XML;
            	if (selectedNode.localName()=="doc") {
            	editing=true;  
            	current=selectedNode;
                       clearInterval(interval2);  
                       if(currentDocWindow != null){
					        addDoc.removeChild(currentDocWindow);
							}    
                       
                       
	                       documentpane.selectedChild=addDoc;

	                       var selectedDoc:Doc;
	                       for (var i:int = 0; i < docList.length; ++i){
	                               var doc:Doc = docList[i];
	                               if(doc.title == selectedNode.attribute("label")){
	                                       selectedDoc = doc;
	                               }
	                       }        
	                   addDoc.addChild(selectedDoc.docWindow);
						currentDocWindow = selectedDoc.docWindow;   

	                   }
	                   else if (selectedNode.localName()=="folder" || selectedNode.localName()=="root"){
	                   	docTree.expandItem(selectedNode, true);
	                   }
	                   

	                
	                   
                               
             }  
             
             private function singleClickDoc():void{
             	if (!editing){
				clearInterval(interval1);
				editing=false;
				current=null;
				selectedNode = docTree.selectedItem as XML;
				if (selectedNode.localName()=="doc"){
				
					var parent:XML = selectedNode.parent();
	
					var selectedDoc:Doc;
					for (var i:int = 0; i < docList.length; ++i){
		                               var doc:Doc = docList[i];
		                               if(doc.title == selectedNode.attribute("label")){
		                                       selectedDoc = doc;
		                               }
		                       }        
		                       
	
		                   
					
					docText = selectedDoc.viewText();
					documentpane.selectedChild = docview;
	
					trace(docview);
					trace(docviewWind);
					trace(docviewText);
					if(docviewText == null){
					}				
					else{				
						docviewText.text = docText;
					}
			}
				else if(selectedNode.localName()=="folder" || selectedNode.localName()=="root"){
					docTree.expandItem(selectedNode, true);
				}
				
				

				clearInterval(interval2);


			}
			
			}

             
             private function editJob():void{
            	selectedNode=jobTree.selectedItem as XML; 
            	if (selectedNode != null && selectedNode.localName()=="job"){
            	editing=true; 
            	current=selectedNode;
				//var parent:XML = selectedNode.parent();
				jobpane.selectedChild=addJob;
				var selectedJob:Job;

				for (var i:int = 0; i < jobList.length; ++i){
					var job:Job = jobList[i];					
					if(job.company + " - " + job.title == selectedNode.attribute("label")){
						selectedJob = job;
						index = jobList.indexOf(job);
					}
				}	

                addJob.addChild(selectedJob.jobWindow); 
                currentJobWindow = selectedJob.jobWindow;              
             }   }  
        
             
             private function editDoc2():void{  
             	selectedNode = docTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName()=="doc"){       
                editing = true;
				current=selectedNode;
				var parent:XML = selectedNode.parent();
				documentpane.selectedChild=addDoc;
				var selectedDoc:Doc;
                for (var i:int = 0; i < docList.length; ++i){
                       var doc:Doc = docList[i];
                       if(doc.title == selectedNode.attribute("label")){
                               selectedDoc = doc;
                       }
               	}        
                addDoc.addChild(selectedDoc.docWindow); 
                currentDocWindow = selectedDoc.docWindow;              
             }  }
			
			private function deleteDoc(evt:Event):void{
				editing=false;
				current=null;
				selectedNode = docTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName()!="root"){
					areYouSureDoc();
					//delete jobTree.job.(@label==selectedNode.label)[0];
//					var deleteNode:XML = jobTree.selectedItem as XML;
//					jobTree.selectedItem = deleteNode.parent();
//					delete jobTree.selectedItem.node[deleteNode.childIndex()];	
//					trace("deleted?")	
					//removeNode(docTree, selectedNode);		
					//documentpane.selectedChild=initialdoc;					
				}
			}
			
			private function areYouSureDoc():void{
				areYouSureWindowDoc = new Panel();
				var OKBD:Button = new Button();
				OKBD.label = "OK"
				var CBD:Button = new Button();
				CBD.label = "Cancel"
				OKBD.addEventListener(MouseEvent.CLICK, yesDeleteDoc);
				CBD.addEventListener(MouseEvent.CLICK, closePopupDoc);
				var confDtxt:Text = new Text();
				confDtxt.text = "Are you sure you want to delete the selected item?"
				confDtxt.height = 60;
				confDtxt.width = 128;
				areYouSureWindowDoc.height = 158;
				areYouSureWindowDoc.width = 168;
				OKBD.x = 10;
				CBD.x = 75;
				OKBD.y = 86;
				CBD.y = 86;
				confDtxt.x=15;
				confDtxt.y=15;
				var dcb:ControlBar = new ControlBar();
				var dvb:VBox = new VBox();
				var s:Spacer = new Spacer();
				dvb.setStyle("paddingBottom", 5);
                dvb.setStyle("paddingLeft", 5);
                dvb.setStyle("paddingRight", 5);
                dvb.setStyle("paddingTop", 5);
				dvb.addChild(confDtxt);
				dcb.addChild(s);
				dcb.addChild(OKBD);
				dcb.addChild(CBD);
				areYouSureWindowDoc.addChild(dvb);
				areYouSureWindowDoc.addChild(dcb);
				areYouSureWindowDoc.title = "Delete?";
			
				PopUpManager.addPopUp(areYouSureWindowDoc, this, true);
                PopUpManager.centerPopUp(areYouSureWindowDoc);
			}
			
			private function closePopupDoc(evt:Event):void{
				PopUpManager.removePopUp(areYouSureWindowDoc);
			}
			
			private function yesDeleteDoc(evt:Event):void{
				closePopupDoc(evt);
				selectedNode = docTree.selectedItem as XML;
				removeNode(docTree, selectedNode);		
				documentpane.selectedChild=initialdoc;
			}
			
			private function areYouSureJob():void{
				areYouSureWindowJob = new Panel();
				var OKBJ:Button = new Button();
				OKBJ.label = "OK"
				var CBJ:Button = new Button();
				CBJ.label = "Cancel"
				var confJtxt:Text = new Text();
				confJtxt.text = "Are you sure you want to delete the selected item?"
				confJtxt.height = 60;
				confJtxt.width = 128;
				areYouSureWindowJob.height = 158;
				areYouSureWindowJob.width = 168;
				OKBJ.x = 10;
				CBJ.x = 75;
				OKBJ.y = 86;
				CBJ.y = 86;
				confJtxt.x=10;
				confJtxt.y=10;
				OKBJ.addEventListener(MouseEvent.CLICK, yesDeleteJob);
				CBJ.addEventListener(MouseEvent.CLICK, closePopupJob);
				var jcb:ControlBar = new ControlBar();
				var jvb:VBox = new VBox();
				var s:Spacer = new Spacer();
				jvb.setStyle("paddingBottom", 5);
                jvb.setStyle("paddingLeft", 5);
                jvb.setStyle("paddingRight", 5);
                jvb.setStyle("paddingTop", 5);
				jvb.addChild(confJtxt);
				jcb.addChild(s);
				jcb.addChild(OKBJ);
				jcb.addChild(CBJ);
				areYouSureWindowJob.addChild(jvb);
				areYouSureWindowJob.addChild(jcb);
				areYouSureWindowJob.title = "Delete?";
				PopUpManager.addPopUp(areYouSureWindowJob, this, true);
                PopUpManager.centerPopUp(areYouSureWindowJob);
			}
			
			private function closePopupJob(evt:Event):void{
				PopUpManager.removePopUp(areYouSureWindowJob);
			}
			
			private function yesDeleteJob(evt:Event):void{
				closePopupJob(evt);
				selectedNode = jobTree.selectedItem as XML;
				removeNode(jobTree, selectedNode);		
				jobpane.selectedChild=initialjob;
			}
             
		]]>
	</mx:Script>
	
</mx:WindowedApplication>
