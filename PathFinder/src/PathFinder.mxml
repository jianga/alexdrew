<?xml version="1.0" encoding="utf-8"?>

<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:comp = "ui.*" creationComplete="init()" layout="absolute" width="948.6" height="656" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Style>
       	.myFontStyle { 
           	fontSize: 18;
      	}
    </mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.List;
			import mx.controls.Image;
			import mx.containers.Panel;
			import mx.managers.PopUpManager
			import mx.containers.ControlBar;
            import mx.containers.VBox;
            import mx.controls.Button;
            import mx.controls.Label;
            import mx.controls.Spacer;
            import mx.controls.TextInput;
            import mx.collections.ArrayCollection;
            import mx.collections.XMLListCollection;
            
            private var OKButton:Button = new Button();
			private var dropdown:ComboBox = new ComboBox();
			private var browserPanel:Panel = new Panel();
			private var newFolderPanel:Panel;
			
			private var docMenu:ContextMenu = new ContextMenu();
            private var jobMenu:ContextMenu = new ContextMenu(); 
			
			[Bindable] private var nameInput:TextInput = new TextInput();
			private var openSequence:Array = [];
			[Bindable] public var myJobs:XML =
            <root label = "My Jobs" isBranch ="true">
            </root>;
            
            [Bindable] public var myDocs:XML =
            <root label = "My Documents" isBranch = "true">
            </root>;

			[Bindable] public var selectedFolder:XML;

			[Embed(source="Pictures/calendar.jpg")]
			public var calendarpicture:Class;
			[Embed(source="Pictures/calendar.jpg")]
			public var docpicture:Class;
			[Embed(source="Pictures/calendar.jpg")]
			public var briefcasepicture:Class;
			[Embed(source="Pictures/calendar.jpg")]
			public var folderpicture:Class;

			
			private function init():void{
				var docmenuView:ContextMenuItem = new ContextMenuItem("View");
				docmenuView.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,viewDoc); 
				docMenu.addItem(docmenuView);
				var docmenuEdit:ContextMenuItem = new ContextMenuItem("Edit");
				docmenuEdit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,editDoc); 
            	docMenu.addItem(docmenuEdit);
            	var docmenuDelete:ContextMenuItem = new ContextMenuItem("Delete");
				docmenuDelete.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,deleteDoc); 
            	docMenu.addItem(docmenuDelete);
				
				var jobmenuView:ContextMenuItem = new ContextMenuItem("View");
				jobmenuView.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,viewJob); 
				jobMenu.addItem(jobmenuView);
				var jobmenuEdit:ContextMenuItem = new ContextMenuItem("Edit");
				jobmenuEdit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,editThisJob); 
            	jobMenu.addItem(jobmenuEdit);
            	var jobmenuDelete:ContextMenuItem = new ContextMenuItem("Delete");
				jobmenuDelete.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,deleteJob); 
            	jobMenu.addItem(jobmenuDelete);
			
				var s:Spacer = new Spacer();
				newFolderPanel=new Panel();
				newFolderPanel.title="New Folder";
				newFolderPanel.visible=true;
				var vb:VBox = new VBox();
                var nameLabel:Label = new Label();;
                var cb:ControlBar = new ControlBar();
                var saveButton:Button = new Button();
                var cancelButton:Button = new Button();
                s.percentWidth = 100;
                saveButton.label = "Save";
                saveButton.addEventListener(MouseEvent.CLICK, saveFolder);
                cancelButton.label = "Cancel";
                cancelButton.addEventListener(MouseEvent.CLICK, closePopUpNF);
                cb.addChild(s);
                cb.addChild(saveButton);
                cb.addChild(cancelButton);
                nameLabel.text = "New Folder Name:";
                vb.setStyle("paddingBottom", 5);
                vb.setStyle("paddingLeft", 5);
                vb.setStyle("paddingRight", 5);
                vb.setStyle("paddingTop", 5);
                vb.addChild(nameLabel);
                vb.addChild(nameInput);
                nameInput.width=200;
                newFolderPanel.width = 240;
                newFolderPanel.height = 140;
                newFolderPanel.addChild(vb);
                newFolderPanel.addChild(cb);
                                        
			}
			
			private function viewDoc(evt:Event):void{
				doubleClickDoc(evt);
			}
			
			private function editDoc(evt:Event):void{
				doubleClickDoc(evt);
			}
			
			
			private function viewJob(evt:Event):void{
				singleClickJob();
			}
			
			private function editThisJob(evt:Event):void{
				doubleClickJob(evt);
			}

			private function saveFolder(evt:MouseEvent):void {
				
				
							
				if(viewstack1.selectedChild.label == "Positions"){
					selectedNode = jobTree.selectedItem as XML;
					if(selectedNode != null){
    					if (selectedNode.localName()=="job"){
    						selectedNode=jobTree.getParentItem(jobTree.selectedItem);				
    					}			
    				}
    				else{
                		selectedNode=myJobs;
                		}
                	selectedNode.appendChild(<folder id = {nameInput.text} label = {nameInput.text} isBranch = "true"/>);
                	jobTree.expandItem(selectedNode, true);
    			}
    			
    			if(viewstack1.selectedChild.label == "Documents"){
    				selectedNode = docTree.selectedItem as XML;
					if(selectedNode != null){
    					if (selectedNode.localName()=="doc"){
    						selectedNode=docTree.getParentItem(docTree.selectedItem);				
    					}			
    				}
    				else{
                		selectedNode=myDocs;
                		}
                	selectedNode.appendChild(<folder id = {nameInput.text} label = {nameInput.text} isBranch = "true"/>);
                	docTree.expandItem(selectedNode, true);
    			}
    			
    			nameInput.text = "";
                PopUpManager.removePopUp(newFolderPanel);
            }
			
			private function closePopUpNF(evt:MouseEvent):void {
                PopUpManager.removePopUp(newFolderPanel);
                nameInput.text = "";
            }
            
			
			private function getFolderPopUp(event:MouseEvent):void{
				PopUpManager.addPopUp(newFolderPanel, this, true);
                PopUpManager.centerPopUp(newFolderPanel);
			}
		]]>
	</mx:Script>
	<mx:ViewStack x="10" y="10" id="viewstack1" width="926" height="626">
		<mx:Canvas label="Calendar" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" icon="@Embed(source='Pictures/calpic-sm.jpg')">
			<mx:Image x="0" y="92" width="557" height="534">
				<mx:source>Pictures/calendar.png</mx:source>
			</mx:Image>
			<mx:ViewStack x="565" y="92" id="viewstack3" width="351" height="524">
				<mx:Canvas label="View 1" width="100%" height="100%">
				</mx:Canvas>
			</mx:ViewStack>
			<mx:TitleWindow x="565" y="92" width="351" height="524" layout="absolute" title="To Do:" fontSize="20">
				<mx:CheckBox x="10" y="20" label="Add a Job" width="311"/>
			</mx:TitleWindow>
			<mx:Text x="296" y="10" text="Welcome to PathFinder!" fontSize="50" color="#497AD2" width="556" fontFamily="Georgia"/>
		</mx:Canvas>
		<mx:Canvas label="Documents" width="120%" height="100%" horizontalScrollPolicy="off" visible="true" verticalScrollPolicy="off" icon="@Embed(source='Pictures/docpicturesm.jpg')">
			<mx:Button x="0" y="589" label="Add Folder" width="124" click="getFolderPopUp(event)" fontSize="14"/>
			<mx:Button x="141" y="589" label="Add Doc" width="124" click="addDocagain()" fontSize="14"/>
			<mx:ViewStack x="273" y="10" id="documentpane" width="643" height="606">
			<mx:Canvas id = "initialdoc" label="Initial" width="100%" height="100%">
			</mx:Canvas>
			<mx:Canvas id = "addDoc" label="AddDoc" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<comp:DocWindow id = "docw" x = "0" y = "0">
						
					</comp:DocWindow>
					<mx:Button x="10" y="562" label="Save" fontSize="20" width="97" click = "saveDoc()"/>
					<mx:Button x="115" y="562" label="Cancel" fontSize="20" click="cancelDoc()"/>
					<mx:Button x="222" y="562" label="Clear All" fontSize="20" click = "clearDocFields()"/>
				</mx:Canvas>
			</mx:ViewStack>
			<mx:Tree id = "docTree" x="0" y="88" width="265" height="498" doubleClickEnabled = "true" showRoot="true" labelField="@label" dragEnabled="true" contextMenu="docMenu" rightClick = "docMenu.display(this.stage, this.mouseX, this.mouseY)" dropEnabled="true" dataProvider="{myDocs}">	

			</mx:Tree>
			
		</mx:Canvas>
		<mx:Canvas label="Positions" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" icon="@Embed(source='Pictures/briefcasepic-jobs.jpg')">
			<mx:Button x="0" y="589" label="Add Folder" width="124" click="getFolderPopUp(event)" fontSize="14"/>
			<mx:Button x="141" y="589" label="Add Job" width="124" click="addJobagain()" fontSize="14"/>
			<mx:ViewStack x="273" y="10" id="jobpane" width="643" height="606">
				<mx:Canvas id = "initialjob" label="Initial" width="100%" height="100%">
				</mx:Canvas>
				<mx:Canvas id = "addJob" label="addJob" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
					<!--<comp:JobWindow id = "jobw" x = "0" y = "0"/>-->
						
					
					<mx:Button x="10" y="562" label="Save" fontSize="20" width="97" click="saveJob()"  styleName="myFontStyle"/>
					<mx:Button x="115" y="562" label="Cancel" fontSize="20" click="cancelJob()" styleName="myFontStyle"/>
					<mx:Button x="222" y="562" label="Clear All" fontSize="20" click = "clearJobFields()" styleName="myFontStyle"/>
				</mx:Canvas>
				<mx:Canvas id = "view" label="viewJob" width="100%" height="100%" >
					<mx:TitleWindow id = "viewWind" x="0" y="0" width="633" height="554" layout="absolute" title="View Job" fontSize="34" fontFamily="Times New Roman">
						<mx:Text id = "viewText" x="10" y="10" width="583" height="501" text = "doot" styleName = "myFontStyle"/>
					</mx:TitleWindow>
					<mx:Button x="10" y="562" label="Edit" fontSize="20" click = "editJob()"/>
				</mx:Canvas>
			</mx:ViewStack>
			<mx:Tree id = "jobTree" x="0" y="88" width="265" height="498" doubleClickEnabled = "true" showRoot="true" labelField="@label" dragEnabled="true" dropEnabled="true" defaultLeafIcon="@Embed(source='Pictures/briefcase-leaf.jpg')" contextMenu="jobMenu" rightClick = "jobMenu.display(this.stage, this.mouseX, this.mouseY)" dataProvider="{myJobs}">	

			</mx:Tree>
		</mx:Canvas>
	</mx:ViewStack>
	<mx:ToggleButtonBar x="10" y="10">
	</mx:ToggleButtonBar>
	<mx:ToggleButtonBar dataProvider="viewstack1" labelField="icon" height="85" width="264" horizontalCenter="-331" verticalCenter="-271">
	</mx:ToggleButtonBar>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.DateChooser;
			import mx.controls.Text;
			import mx.controls.List;
			import mx.controls.ComboBox;
			import model.Doc;
			import model.Job;
			import ui.JobWindow;
			import mx.binding.utils.BindingUtils;
			

			[Bindable] private var selectedNode:XML;
			[Bindable] private var jobList:Array = new Array();
			[Bindable] private var editing:Boolean = false;
			[Bindable] private var index:int;
			[Bindable] private var jobText:String;
			[Bindable] private var currentJobWindow:JobWindow;
			
			private var interval1:Number=0;

			
			private function clearDocFields():void {
				docw.doctitle.text = "";
				docw.docdescription.text = "";
				docw.docfile.text = "";
			}
			

			
			private function cancelDoc():void {
				documentpane.selectedChild=initialdoc;
				docw.doctitle.text = "";
				docw.docdescription.text = "";
				docw.docfile.text = "";
			}
			private function saveJob():void {
				
				jobpane.selectedChild=initialjob;
				var job:Job = new Job(JobWindow(currentJobWindow));
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName().toString()=="job"){
					trace("not a branch!");
					selectedNode = jobTree.getParentItem(jobTree.selectedItem);
				}
				if(selectedNode == null){
					trace("selectedNode null");
					selectedNode = myJobs;			
				}
//				if(editing == true){
//				 	for (var i:int = 0; i< myJobs.length(); ++i)
//					{
//						
//						if(myJobs.item[i].attribute("label") == selectedNode.attribute("label"))
//					{
//						delete myJobs.item[i];
//						trace("hello")
//					}
//					}
//					trace(myJobs);
//				}

				var jobLabel:String = job.company + " - " + job.title;
				selectedNode.appendChild(<job id = {jobLabel} label = {jobLabel} isBranch = "false"/>);
				jobList.push(job);
				editing = false;
            	jobTree.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickJob);
            	jobTree.addEventListener(MouseEvent.CLICK, clickHandler);
            	jobTree.expandItem(selectedNode, true);
            	addJob.removeChild(currentJobWindow);
            	currentJobWindow = null;
            	
				
			}
			
			private function addJobagain():void{
				
				if(currentJobWindow != null){
					addJob.removeChild(currentJobWindow);
				}
				jobpane.selectedChild=addJob; 
				var jobWindow:JobWindow = new JobWindow();
				trace("New Job Window created");
				addJob.addChild(jobWindow);
				currentJobWindow = jobWindow;

			}
			
			private function addDocagain():void{
				documentpane.selectedChild=addDoc; 
				if(docw == null){}
				else{
					docw = new DocWindow();
					docw.title = "Add Doc";
				}
				
			}

			
			private function doubleClickJob(evt:Event):void{	
				clearInterval(interval1);
				if(currentJobWindow != null){
					addJob.removeChild(currentJobWindow);
				}
				editing = true;
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode!=null){
				if (selectedNode.localName()=="job"){
					var parent:XML = selectedNode.parent();
					jobpane.selectedChild=addJob;
					var selectedJob:Job;
					for (var i:int = 0; i < jobList.length; ++i){
						var job:Job = jobList[i];
						
						if(job.company + " - " + job.title == selectedNode.attribute("label")){
							selectedJob = job;
							index = jobList.indexOf(job);
						}
					}
					addJob.addChild(selectedJob.jobWindow);
					currentJobWindow = selectedJob.jobWindow;
					trace(selectedJob.company);
					trace(selectedJob.jobWindow.jobtitle.text);
					trace("hi");
					
				}
				else if(selectedNode.localName()=="folder" || selectedNode.localName()=="root"){
					
				}
			}
					
			}
			
			private function singleClickJob():void{
				clearInterval(interval1);

				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode.localName()=="job"){
				
				var parent:XML = selectedNode.parent();
				jobpane.selectedChild=addJob;
				var selectedJob:Job;
				for (var i:int = 0; i < jobList.length; ++i){
					var job:Job = jobList[i];
						if(job.company + " - " + job.title == selectedNode.attribute("label")){
						selectedJob = job;
						index = jobList.indexOf(job);
						jobText = selectedJob.viewText();
						jobpane.selectedChild = view;
					}
				}
				
				jobText = selectedJob.viewText();
				jobpane.selectedChild = view;

				trace(view);
				trace(viewWind);
				trace(viewText);
				if(viewText == null){
				}				
				else{				
					viewText.text = jobText;
				}
				}
				else if(selectedNode.localName()=="folder" || selectedNode.localName()=="root"){
					jobTree.expandItem(selectedNode, true);
				}
				
				

				clearInterval(interval1);


			}


			
			private function clickHandler(event:MouseEvent):void{			
				clearInterval(interval1);
				interval1 = setInterval(singleClickJob, 300);

			}

			private function deleteJob(evt:Event):void{
				//trace('deleting...');
				selectedNode = jobTree.selectedItem as XML;
				if (selectedNode != null && selectedNode.localName()!="root"){
					//delete jobTree.job.(@label==selectedNode.label)[0];
//					var deleteNode:XML = jobTree.selectedItem as XML;
//					jobTree.selectedItem = deleteNode.parent();
//					delete jobTree.selectedItem.node[deleteNode.childIndex()];	
//					trace("deleted?")	
					removeNode(jobTree, selectedNode);							
				}
			}
			
			private function removeNode(tree:Tree, node:XML):void
            {
                //var node:XML = XML(tree.selectedItem);
                if(node == null) return;
				tree.selectedItem = node.parent();
                var children:XMLList = XMLList(node.parent().children());
                for(var i:int=0; i<children.length(); i++)
                {
                    if(children[i].@label == node.@label)
                    {
                        delete children[i];
                    }
                }
            } 

			
			private function cancelJob():void {
				jobpane.selectedChild=initialjob;
				addJob.removeChild(currentJobWindow);
				currentJobWindow = null;
			}
		
			private function clearJobFields():void {
				addJobagain();
			}
			
			[Bindable] private var docList:Array = new Array();
		
			private function saveDoc():void {
                   documentpane.selectedChild=initialdoc;
                   var doc:Doc = new Doc(docw);
                   selectedNode = docTree.selectedItem as XML;
                   if (selectedNode != null && selectedNode.localName().toString()=="doc"){
						selectedNode = docTree.getParentItem(docTree.selectedItem);
					}
				   if(selectedNode == null){
						//trace("selectedNode null");
						selectedNode = myDocs;				
				   }
                   selectedNode.appendChild(<doc label = {doc.title}/>);
                   docList.push(doc);
                   
                   docTree.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickDoc);
                   docTree.expandItem(selectedNode, true);
            }
            
            private function doubleClickDoc(evt:Event):void{       
                               
                       selectedNode = docTree.selectedItem as XML;
                       if (selectedNode.localName()=="doc") {
	                       documentpane.selectedChild=addDoc;

	                       var selectedDoc:Doc;
	                       for (var i:int = 0; i < docList.length; ++i){
	                               var doc:Doc = docList[i];
	                               if(doc.title == docw.doctitle.text){
	                                       selectedDoc = doc;
	                               }
	                       }        
	                       

	                   }
	                   else if (selectedNode.localName()=="folder" || selectedNode.localName()=="root"){
	                   	docTree.expandItem(selectedNode, true);
	                   }
	                   
	                   
                               
             }  
             
             private function editJob():void{
                               
                               
                editing = true;
				selectedNode = jobTree.selectedItem as XML;
				var parent:XML = selectedNode.parent();
				jobpane.selectedChild=addJob;
			//	jobw.jobcompany.text = selectedNode.attribute("label");
				var selectedJob:Job;
			//	trace(jobw.jobcompany.text);
				for (var i:int = 0; i < jobList.length; ++i){
					var job:Job = jobList[i];
					
					if(job.company == selectedNode.attribute("label")){
						selectedJob = job;
						index = jobList.indexOf(job);
					}
				}	
				
//				jobw.jobcompany.text = selectedJob.company;
//				jobw.jobtitle.text = selectedJob.title;
//				jobw.jobrequirements.text = selectedJob.requirements;
//				jobw.jobdeadline.selectedDate = selectedJob.deadline;
                               
             }          
             
			
			private function deleteDoc(evt:Event):void{
				selectedNode = docTree.selectedItem as XML;
				if (selectedNode.localName()=="doc"){
					docTree.getParentItem(docTree.selectedItem).removeChild(docTree.selectedItem);
				}
			}
             
		]]>
	</mx:Script>
	
</mx:WindowedApplication>
